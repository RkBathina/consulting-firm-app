# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: consulting-firm-app-react CI-CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
     # Install application dependencies
    - name: Install Dependencies
      run: |
        npm install
     # Build and Test the apps
    - name: build
      run: |
       npm run build
       
  push_to_docker_hub:

        runs-on: ubuntu-latest
        # build docker image and push to docker hub
        # only if the app build and test successfully
        needs: [build]
        steps:
          
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v1
    
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
    
          - name: Login to DockerHub
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
    
          - name: Build and push
            uses: docker/build-push-action@v2
            with:
              context: ./
              file: ../Dockerfile
              push: true
              tags: ${{ secrets.DOCKER_USERNAME }}/consulting-firm-app-react:latest
    
          - name: Run the image in a container
            uses: addnab/docker-run-action@v3
            with:
              image: ${{ secrets.DOCKER_USERNAME }}/consulting-firm-app-react:latest
              run: |
                echo "running the docker image"      
   
